{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "chatbot2",
    "name" : "chatbot2",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 8,
      "sizeY" : 5,
      "resources" : [ ],
      "templateHtml" : "<div class=\"chat-container\">\r\n  <div class=\"chat-list\">\r\n    <div *ngFor=\"let msg of chatlist\" class=\"chat-row\" [ngClass]=\"msg.role === 'user' ? 'me' : 'bot'\">\r\n      <div class=\"bubble\">\r\n        <div class=\"meta\">\r\n          <span class=\"nick\">{{ msg.role === 'user' ? 'Yo' : (msg.nick || 'Bot') }}</span>\r\n          <small class=\"ts\">{{ (msg.ts || 0) | date:'yyyy-MM-dd HH:mm:ss' }}</small>\r\n        </div>\r\n        <div class=\"text\">{{ msg.content }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"chat-input\">\r\n    <textarea [(ngModel)]=\"content\" (keydown)=\"onKeyDown($event)\" placeholder=\"Escribí un mensaje…\" rows=\"1\"></textarea>\r\n    <button (click)=\"sendMsg()\" class=\"send\">Enviar</button>\r\n  </div>\r\n</div>\r\n",
      "templateCss" : ":root {\r\n  --bg-me: #DCF8C6;            /* verde claro tipo WhatsApp */\r\n  --fg-me: #111;\r\n  --bg-bot: #2a2f3a;           /* gris oscuro */\r\n  --fg-bot: #fff;\r\n  --border: rgba(0,0,0,.12);\r\n}\r\n\r\n.chat-container{\r\n  width:100%; height:100%;\r\n  display:flex; flex-direction:column;\r\n}\r\n\r\n.chat-list{\r\n  flex:1; overflow:auto; padding:12px;\r\n  display:flex; flex-direction:column; gap:8px;\r\n}\r\n\r\n.chat-row{ display:flex; }\r\n.chat-row.me{ justify-content:flex-end; }\r\n.chat-row.bot{ justify-content:flex-start; }\r\n\r\n.bubble{\r\n  max-width:75%;\r\n  padding:10px 12px; border-radius:14px;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.08);\r\n}\r\n.chat-row.me .bubble{\r\n  background:var(--bg-me); color:var(--fg-me);\r\n  border-top-right-radius:4px;\r\n}\r\n.chat-row.bot .bubble{\r\n  background:var(--bg-bot); color:var(--fg-bot);\r\n  border-top-left-radius:4px;\r\n}\r\n\r\n.meta{\r\n  display:flex; gap:8px; align-items:center;\r\n  font-size:12px; opacity:.8; margin-bottom:4px;\r\n}\r\n.nick{ font-weight:600; }\r\n.text{ white-space:pre-wrap; word-break:break-word; }\r\n\r\n.chat-input{\r\n  display:flex; gap:8px; align-items:flex-end;\r\n  padding:10px; border-top:1px solid var(--border);\r\n}\r\n.chat-input textarea{\r\n  flex:1; resize:none; min-height:40px; max-height:140px;\r\n  padding:10px 12px; border-radius:10px; outline:none;\r\n  border:1px solid var(--border); background:transparent;\r\n  color:inherit; font:inherit;\r\n}\r\n.chat-input .send{\r\n  padding:10px 14px; border-radius:10px;\r\n  border:1px solid var(--border);\r\n  background:rgba(0,0,0,.06); color:inherit; cursor:pointer;\r\n}\r\n.chat-input .send:hover{ filter:brightness(1.1); }\r\n",
      "controllerScript" : "/****************************************************************************\r\n * Widget: Chat (Timeseries)\r\n * Lee y muestra timeseries \"chat\" y envía nuevos mensajes como telemetría\r\n * al USER actual.\r\n *\r\n * Requisitos (muy importante):\r\n * 1) Este widget debe ser de tipo **Timeseries**.\r\n * 2) Datasource: **Current user** (Usuario actual).\r\n * 3) Data key: **chat** (String). *Sin agregación* en la ventana de tiempo.\r\n ***************************************************************************/\r\n\r\nself.onInit = function () {\r\n  const s = self.ctx.$scope;\r\n  s.content = '';\r\n  s.chatlist = [];\r\n\r\n  // Utilidad: scroll al final\r\n  function scrollBottom() {\r\n    const cont = self.ctx.$container && self.ctx.$container[0].querySelector('.chat-list');\r\n    if (cont) cont.scrollTop = cont.scrollHeight;\r\n  }\r\n\r\n  // Enviar mensaje -> guardar como telemetría de USER\r\n  s.sendMsg = function () {\r\n    const text = (s.content || '').trim();\r\n    if (!text) return;\r\n    if (text.length > 1000) { console.warn('Mensaje muy largo (>1000).'); return; }\r\n\r\n    const cu = self.ctx.currentUser || {};\r\n    const userId = (cu.userId && (cu.userId.id || cu.userId)) || null;\r\n    if (!userId) { console.error('userId no disponible'); return; }\r\n\r\n    const nick = [cu.firstName || '', cu.lastName || ''].join(' ').trim() || cu.name || cu.email || 'Yo';\r\n    const ts = Date.now();\r\n\r\n    // Estructura de mensaje (guardamos como string JSON en la key \"chat\")\r\n    const msg = { role: 'user', userId: userId, nick: nick, content: text, ts: ts };\r\n    const body = [{ ts: ts, values: { chat: JSON.stringify(msg) } }];\r\n\r\n    self.ctx.http.post(`/api/plugins/telemetry/USER/${userId}/timeseries/ANY`,\r\n      body,\r\n      {\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          'X-Authorization': 'Bearer ' + localStorage.getItem('jwt_token')\r\n        }\r\n      }\r\n    ).subscribe(\r\n      () => {\r\n        // Mostrarlo al toque (optimista). onDataUpdated volverá a ordenar todo.\r\n        s.content = '';\r\n        s.chatlist.push(msg);\r\n        self.ctx.detectChanges();\r\n        setTimeout(scrollBottom, 0);\r\n      },\r\n      (err) => {\r\n        console.error('Error enviando chat:', err);\r\n      }\r\n    );\r\n  };\r\n\r\n  // Enter = enviar ; Shift+Enter = nueva línea\r\n  s.onKeyDown = function (ev) {\r\n    if (ev.key === 'Enter' && !ev.shiftKey) {\r\n      ev.preventDefault();\r\n      s.sendMsg();\r\n    }\r\n  };\r\n};\r\n\r\nself.onDataUpdated = function () {\r\n  const s = self.ctx.$scope;\r\n  const rows = [];\r\n\r\n  // Tomamos todo el histórico visible en la ventana de tiempo\r\n  const series = (self.ctx.data && self.ctx.data[0] && self.ctx.data[0].data) ? self.ctx.data[0].data : [];\r\n  for (let i = 0; i < series.length; i++) {\r\n    const ts = series[i][0];\r\n    let val = series[i][1];\r\n\r\n    let msg = null;\r\n    if (typeof val === 'string') {\r\n      // Guardamos como string JSON; lo parseamos\r\n      try { msg = JSON.parse(val); }\r\n      catch { msg = { role: 'system', content: String(val) }; }\r\n    } else if (val && typeof val === 'object') {\r\n      // (por si llega como objeto)\r\n      msg = val;\r\n    }\r\n\r\n    if (msg) {\r\n      msg.ts = msg.ts || ts;\r\n      // Normalizamos role por si no viene\r\n      if (!msg.role) {\r\n        // Si userId coincide con el actual, lo tratamos como \"user\", sino \"assistant\"\r\n        const cu = self.ctx.currentUser || {};\r\n        const myId = (cu.userId && (cu.userId.id || cu.userId)) || null;\r\n        msg.role = (myId && msg.userId == myId) ? 'user' : 'assistant';\r\n      }\r\n      rows.push(msg);\r\n    }\r\n  }\r\n\r\n  // Orden por tiempo ascendente\r\n  rows.sort((a, b) => (a.ts || 0) - (b.ts || 0));\r\n  s.chatlist = rows;\r\n  self.ctx.detectChanges();\r\n\r\n  // Scroll al final luego de render\r\n  setTimeout(() => {\r\n    const cont = self.ctx.$container && self.ctx.$container[0].querySelector('.chat-list');\r\n    if (cont) cont.scrollTop = cont.scrollHeight;\r\n  }, 10);\r\n};\r\n\r\nself.typeParameters = function () {\r\n  // Igual que tu ejemplo: un datasource / una key\r\n  return { maxDatasources: 1, maxDataKeys: 1, minDataKeys: 1 };\r\n};\r\n",
      "settingsForm" : [ ],
      "dataKeySettingsForm" : [ ],
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"shadowSize\":4,\"fontColor\":\"#545454\",\"fontSize\":10,\"xaxis\":{\"showLabels\":true,\"color\":\"#545454\"},\"yaxis\":{\"showLabels\":true,\"color\":\"#545454\"},\"grid\":{\"color\":\"#545454\",\"tickColor\":\"#DDDDDD\",\"verticalLines\":true,\"horizontalLines\":true,\"outlineWidth\":1},\"legend\":{\"show\":true,\"position\":\"nw\",\"backgroundColor\":\"#f0f0f0\",\"backgroundOpacity\":0.85,\"labelBoxBorderColor\":\"rgba(1, 1, 1, 0.45)\"},\"decimals\":1,\"stack\":false,\"tooltipIndividual\":false},\"title\":\"chatbot2\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "3b8a6410-8ba7-11f0-8d0c-9de3d92fa448"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}